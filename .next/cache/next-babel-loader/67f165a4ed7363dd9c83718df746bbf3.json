{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { ApolloProvider } from \"react-apollo\";\nimport App from 'next/app';\nimport { withApolloClient } from '../apollo/withApolloClient';\n\nvar BaseApp =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(BaseApp, _App);\n\n  _createClass(BaseApp, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(context) {\n        var isServer, pageProps;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //\n                // Use getInitialProps as a step in the lifecycle when\n                // we can initialize our store\n                isServer = false; // const store = initializeStore(isServer)\n                //\n                // Check whether the page being rendered by the App has a\n                // static getInitialProps method and if so call it\n                //\n\n                pageProps = {};\n\n                if (!App.getInitialProps) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 5;\n                return App.getInitialProps(context);\n\n              case 5:\n                pageProps = _context.sent;\n\n              case 6:\n                return _context.abrupt(\"return\", {\n                  initialState: {},\n                  isServer: isServer,\n                  pageProps: pageProps\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function BaseApp(props) {\n    _classCallCheck(this, BaseApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BaseApp).call(this, props));\n  }\n\n  _createClass(BaseApp, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          apolloClient = _this$props.apolloClient;\n      return __jsx(React.Fragment, null, __jsx(ApolloProvider, {\n        client: apolloClient\n      }, __jsx(Component, pageProps)));\n    }\n  }]);\n\n  return BaseApp;\n}(App);\n\nvar decorate = function decorate(app) {\n  return withApolloClient(app);\n};\n\nvar MyApp = decorate(BaseApp);\nexport { MyApp };","map":{"version":3,"sources":["/Users/karelcervicek/Documents/GitHub/reality-solution-demo/app/App.tsx"],"names":["BaseApp","App","context","isServer","pageProps","getInitialProps","initialState","Component","apolloClient","decorate","withApolloClient","MyApp"],"mappings":";;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,cAAA,QAAA,cAAA;AACA,OAAA,GAAA,MAAA,UAAA;AACA,SAAA,gBAAA,QAAA,4BAAA;;IAQMA,O;;;;;;;;;;gDACyBE,O;;;;;;AAC3B;AACA;AACA;AAEMC,gBAAAA,Q,QAAAA,C,CACN;AACA;AACA;AACA;AACA;;AACIC,gBAAAA,S,GAAY,EAAZA;;qBACAH,GAAG,CAACI,e;;;;;;uBACYJ,GAAG,CAAHA,eAAAA,CAAAA,OAAAA,C;;;AAAlBG,gBAAAA,S,gBAAAA;;;iDAEK;AACLE,kBAAAA,YAAY,EADP,EAAA;AAELH,kBAAAA,QAAQ,EAFH,QAAA;AAGLC,kBAAAA,SAAS,EAATA;AAHK,iB;;;;;;;;;;;;;;;;;;AAOT,WAAA,OAAA,CAAA,KAAA,EAA8D;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,CAAA;;AAAA,WAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AAE7D;;;;6BAEe;AAAA,UAAA,WAAA,GACiC,KADjC,KAAA;AAAA,UACNG,SADM,GAAA,WAAA,CAAA,SAAA;AAAA,UACKH,SADL,GAAA,WAAA,CAAA,SAAA;AAAA,UACgBI,YADhB,GAAA,WAAA,CAAA,YAAA;AAEd,aACE,KAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACI,KAAA,CAAA,cAAA,EAAA;AAAgB,QAAA,MAAM,EAAEA;AAAxB,OAAA,EACI,KAAA,CAAA,SAAA,EAHV,SAGU,CADJ,CADJ,CADF;AAOD;;;;EApCmBP,G;;AAsCtB,IAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAAA,GAAA,EAAA;AAAA,SAA4BC,gBAAgB,CAA5C,GAA4C,CAA5C;AAAjB,CAAA;;AACA,IAAMC,KAAK,GAAGF,QAAQ,CAAtB,OAAsB,CAAtB;AACA,SAAA,KAAA","sourcesContent":["import React from 'react'\nimport { ApolloProvider } from \"react-apollo\";\nimport App, { AppProps, AppInitialProps, AppContext} from 'next/app';\nimport { withApolloClient } from '../apollo/withApolloClient';\nimport { ApolloClient, NormalizedCacheObject } from 'apollo-boost';\n\ninterface IApolloProps {\n  apolloState?: NormalizedCacheObject;\n  apolloClient: ApolloClient<NormalizedCacheObject>;\n}\n\nclass BaseApp extends App<AppInitialProps & AppProps & IApolloProps >  {\n  static async getInitialProps(context: AppContext) {\n    //\n    // Use getInitialProps as a step in the lifecycle when\n    // we can initialize our store\n\n    const isServer = typeof window === 'undefined'\n    // const store = initializeStore(isServer)\n    //\n    // Check whether the page being rendered by the App has a\n    // static getInitialProps method and if so call it\n    //\n    let pageProps = {}\n    if (App.getInitialProps) {\n      pageProps = await App.getInitialProps(context)\n    }\n    return {\n      initialState: {},\n      isServer,\n      pageProps,\n    }\n  }\n\n  constructor(props: AppInitialProps & AppProps & IApolloProps) {\n    super(props)\n  }\n\n  public render() {\n    const { Component, pageProps, apolloClient } = this.props\n    return (\n      <>\n          <ApolloProvider client={apolloClient}>\n              <Component {...pageProps} />\n          </ApolloProvider>\n      </>\n    )\n  }\n}\nconst decorate = (app: React.ElementType) => withApolloClient(app);\nconst MyApp = decorate(BaseApp);\nexport {\n  MyApp,\n}\n"]},"metadata":{},"sourceType":"module"}