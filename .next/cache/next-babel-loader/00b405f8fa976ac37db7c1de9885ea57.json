{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport { getDataFromTree } from 'react-apollo';\nimport { initApollo } from './initApollo';\nimport get from 'lodash/get';\nimport Head from 'next/head';\nimport React from 'react';\n\nconst withApolloClient = App => {\n  var _class, _temp;\n\n  return _temp = _class = class WithApollo extends React.Component {\n    static async getInitialProps(appCtx) {\n      const {\n        Component,\n        router,\n        ctx\n      } = appCtx;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(appCtx);\n      }\n\n      appProps = _objectSpread({}, appProps, {\n        pageProps: appProps && appProps.pageProps ? appProps.pageProps : {}\n      }, {\n        renderError: null\n      });\n      const apolloClient = initApollo(null, ctx);\n      const apolloState = {\n        data: {}\n      };\n\n      try {\n        // Run all GraphQL queries in the component tree\n        // and extract the resulting data\n        // Run all GraphQL queries\n        await getDataFromTree(__jsx(App, _extends({}, appProps, {\n          Component: Component,\n          router: router,\n          apolloState: apolloState,\n          apolloClient: apolloClient\n        })));\n      } catch (error) {\n        console.error('Error while running `getDataFromTree`', error);\n      }\n\n      if (!process.browser) {\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      apolloState.data = apolloClient.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      // https://github.com/zeit/next.js/issues/7418 - problem with sending cookies on SSR.\n\n      this.apolloClient = props.apolloClient || initApollo(get(props, 'apolloState.data', undefined));\n    }\n\n    render() {\n      return __jsx(App, _extends({}, this.props, {\n        apolloClient: this.apolloClient\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", 'withApolloClient(App)'), _temp;\n};\n\nexport { withApolloClient };","map":{"version":3,"sources":["/Users/karelcervicek/Documents/GitHub/reality-solution-demo/apollo/withApolloClient.tsx"],"names":["getDataFromTree","initApollo","get","Head","React","withApolloClient","App","WithApollo","Component","getInitialProps","appCtx","router","ctx","appProps","pageProps","renderError","apolloClient","apolloState","data","error","console","process","browser","rewind","cache","extract","constructor","props","undefined","render"],"mappings":";;;;AAEA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAOA,MAAMC,gBAAgB,GAAIC,GAAD,IAAc;AAAA;;AACrC,0BAAO,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAoF;AAIzF,iBAAoBC,eAApB,CAAoCC,MAApC,EAAwD;AACtD,YAAM;AAAEF,QAAAA,SAAF;AAAaG,QAAAA,MAAb;AAAqBC,QAAAA;AAArB,UAA6BF,MAAnC;AAEA,UAAIG,QAAa,GAAG,EAApB;;AACA,UAAIP,GAAG,CAACG,eAAR,EAAyB;AACvBI,QAAAA,QAAQ,GAAG,MAAMP,GAAG,CAACG,eAAJ,CAAoBC,MAApB,CAAjB;AACD;;AAEDG,MAAAA,QAAQ,qBACHA,QADG,EAEH;AAAEC,QAAAA,SAAS,EAAED,QAAQ,IAAIA,QAAQ,CAACC,SAArB,GAAiCD,QAAQ,CAACC,SAA1C,GAAsD;AAAnE,OAFG;AAGNC,QAAAA,WAAW,EAAE;AAHP,QAAR;AAMA,YAAMC,YAAY,GAAGf,UAAU,CAAC,IAAD,EAAOW,GAAP,CAA/B;AACA,YAAMK,WAAW,GAAG;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAApB;;AAEA,UAAI;AACF;AACA;AACA;AACA,cAAMlB,eAAe,CACnB,MAAC,GAAD,eACMa,QADN;AAEE,UAAA,SAAS,EAAEL,SAFb;AAGE,UAAA,MAAM,EAAEG,MAHV;AAIE,UAAA,WAAW,EAAEM,WAJf;AAKE,UAAA,YAAY,EAAED;AALhB,WADmB,CAArB;AASD,OAbD,CAaE,OAAOG,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD;;AAED,UAAI,CAACE,OAAO,CAACC,OAAb,EAAsB;AACpB;AACA;AACAnB,QAAAA,IAAI,CAACoB,MAAL;AACD,OAtCqD,CAwCtD;;;AACAN,MAAAA,WAAW,CAACC,IAAZ,GAAmBF,YAAY,CAACQ,KAAb,CAAmBC,OAAnB,EAAnB;AAEA,+BACKZ,QADL;AAEEI,QAAAA;AAFF;AAID;;AAEDS,IAAAA,WAAW,CAACC,KAAD,EAAmD;AAC5D,YAAMA,KAAN,EAD4D,CAE5D;AACA;AACA;;AACA,WAAKX,YAAL,GAAoBW,KAAK,CAACX,YAAN,IAAsBf,UAAU,CAACC,GAAG,CAACyB,KAAD,EAAQ,kBAAR,EAA4BC,SAA5B,CAAJ,CAApD;AACD;;AAEDC,IAAAA,MAAM,GAAG;AACP,aAAO,MAAC,GAAD,eAAS,KAAKF,KAAd;AAAqB,QAAA,YAAY,EAAE,KAAKX;AAAxC,SAAP;AACD;;AA/DwF,GAA3F,yCAC8B,uBAD9B;AAiED,CAlED;;AAoEA,SACEX,gBADF","sourcesContent":["\nimport { ApolloClient, NormalizedCacheObject } from 'apollo-boost'\nimport { getDataFromTree } from 'react-apollo';\nimport { initApollo } from './initApollo';\nimport { AppContext, AppInitialProps, AppProps } from 'next/app';\nimport get from 'lodash/get';\nimport Head from 'next/head';\nimport React from 'react';\n\n\ninterface IApolloProps {\n  apolloState?: NormalizedCacheObject;\n  apolloClient: ApolloClient<NormalizedCacheObject>;\n}\nconst withApolloClient = (App: any) => {\n  return class WithApollo extends React.Component<IApolloProps & AppInitialProps & AppProps> {\n    public static displayName = 'withApolloClient(App)';\n    public apolloClient: ApolloClient<NormalizedCacheObject>;\n\n    public static async getInitialProps(appCtx: AppContext) {\n      const { Component, router, ctx } = appCtx;\n\n      let appProps: any = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(appCtx);\n      }\n\n      appProps = {\n        ...appProps,\n        ...{ pageProps: appProps && appProps.pageProps ? appProps.pageProps : {} },\n        renderError: null,\n      };\n      \n      const apolloClient = initApollo(null, ctx);\n      const apolloState = { data: {} };\n\n      try {\n        // Run all GraphQL queries in the component tree\n        // and extract the resulting data\n        // Run all GraphQL queries\n        await getDataFromTree(\n          <App\n            {...appProps}\n            Component={Component}\n            router={router}\n            apolloState={apolloState}\n            apolloClient={apolloClient}\n          />,\n        );\n      } catch (error) {\n        console.error('Error while running `getDataFromTree`', error);\n      }\n\n      if (!process.browser) {\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      apolloState.data = apolloClient.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n      };\n    }\n\n    constructor(props: IApolloProps & AppInitialProps & AppProps) {\n      super(props);\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      // https://github.com/zeit/next.js/issues/7418 - problem with sending cookies on SSR.\n      this.apolloClient = props.apolloClient || initApollo(get(props, 'apolloState.data', undefined));\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n\nexport {\n  withApolloClient,\n}\n"]},"metadata":{},"sourceType":"module"}