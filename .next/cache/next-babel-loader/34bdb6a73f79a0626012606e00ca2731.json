{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { ApolloProvider } from \"react-apollo\";\nimport App from 'next/app';\nimport { withApolloClient } from '../apollo/withApolloClient';\n\nclass BaseApp extends App {\n  static async getInitialProps(context) {\n    //\n    // Use getInitialProps as a step in the lifecycle when\n    // we can initialize our store\n    const isServer = true; // const store = initializeStore(isServer)\n    //\n    // Check whether the page being rendered by the App has a\n    // static getInitialProps method and if so call it\n    //\n\n    let pageProps = {};\n\n    if (App.getInitialProps) {\n      pageProps = await App.getInitialProps(context);\n    }\n\n    return {\n      initialState: {},\n      isServer,\n      pageProps\n    };\n  }\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      apolloClient\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(ApolloProvider, {\n      client: apolloClient\n    }, __jsx(Component, pageProps)));\n  }\n\n}\n\nconst decorate = app => withApolloClient(app);\n\nconst MyApp = decorate(BaseApp);\nexport { MyApp };","map":{"version":3,"sources":["/Users/karelcervicek/Documents/GitHub/reality-solution-demo/app/App.tsx"],"names":["React","ApolloProvider","App","withApolloClient","BaseApp","getInitialProps","context","isServer","pageProps","initialState","constructor","props","render","Component","apolloClient","decorate","app","MyApp"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,GAAP,MAA0D,UAA1D;AACA,SAASC,gBAAT,QAAiC,4BAAjC;;AAQA,MAAMC,OAAN,SAAsBF,GAAtB,CAAuE;AACrE,eAAaG,eAAb,CAA6BC,OAA7B,EAAkD;AAChD;AACA;AACA;AAEA,UAAMC,QAAQ,OAAd,CALgD,CAMhD;AACA;AACA;AACA;AACA;;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAIN,GAAG,CAACG,eAAR,EAAyB;AACvBG,MAAAA,SAAS,GAAG,MAAMN,GAAG,CAACG,eAAJ,CAAoBC,OAApB,CAAlB;AACD;;AACD,WAAO;AACLG,MAAAA,YAAY,EAAE,EADT;AAELF,MAAAA,QAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD;;AAEDE,EAAAA,WAAW,CAACC,KAAD,EAAmD;AAC5D,UAAMA,KAAN;AACD;;AAEMC,EAAAA,MAAP,GAAgB;AACd,UAAM;AAAEC,MAAAA,SAAF;AAAaL,MAAAA,SAAb;AAAwBM,MAAAA;AAAxB,QAAyC,KAAKH,KAApD;AACA,WACE,4BACI,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEG;AAAxB,OACI,MAAC,SAAD,EAAeN,SAAf,CADJ,CADJ,CADF;AAOD;;AApCoE;;AAsCvE,MAAMO,QAAQ,GAAIC,GAAD,IAA4Bb,gBAAgB,CAACa,GAAD,CAA7D;;AACA,MAAMC,KAAK,GAAGF,QAAQ,CAACX,OAAD,CAAtB;AACA,SACEa,KADF","sourcesContent":["import React from 'react'\nimport { ApolloProvider } from \"react-apollo\";\nimport App, { AppProps, AppInitialProps, AppContext} from 'next/app';\nimport { withApolloClient } from '../apollo/withApolloClient';\nimport { ApolloClient, NormalizedCacheObject } from 'apollo-boost';\n\ninterface IApolloProps {\n  apolloState?: NormalizedCacheObject;\n  apolloClient: ApolloClient<NormalizedCacheObject>;\n}\n\nclass BaseApp extends App<AppInitialProps & AppProps & IApolloProps >  {\n  static async getInitialProps(context: AppContext) {\n    //\n    // Use getInitialProps as a step in the lifecycle when\n    // we can initialize our store\n\n    const isServer = typeof window === 'undefined'\n    // const store = initializeStore(isServer)\n    //\n    // Check whether the page being rendered by the App has a\n    // static getInitialProps method and if so call it\n    //\n    let pageProps = {}\n    if (App.getInitialProps) {\n      pageProps = await App.getInitialProps(context)\n    }\n    return {\n      initialState: {},\n      isServer,\n      pageProps,\n    }\n  }\n\n  constructor(props: AppInitialProps & AppProps & IApolloProps) {\n    super(props)\n  }\n\n  public render() {\n    const { Component, pageProps, apolloClient } = this.props\n    return (\n      <>\n          <ApolloProvider client={apolloClient}>\n              <Component {...pageProps} />\n          </ApolloProvider>\n      </>\n    )\n  }\n}\nconst decorate = (app: React.ElementType) => withApolloClient(app);\nconst MyApp = decorate(BaseApp);\nexport {\n  MyApp,\n}\n"]},"metadata":{},"sourceType":"module"}