{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport { getDataFromTree } from 'react-apollo';\nimport { initApollo } from './initApollo';\nimport get from 'lodash/get';\nimport Head from 'next/head';\nimport React from 'react';\n\nvar withApolloClient = function withApolloClient(App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithApollo, _React$Component);\n\n    _createClass(WithApollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(appCtx) {\n          var Component, router, ctx, appProps, apolloClient, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = appCtx.Component, router = appCtx.router, ctx = appCtx.ctx;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return App.getInitialProps(appCtx);\n\n                case 5:\n                  appProps = _context.sent;\n\n                case 6:\n                  appProps = _objectSpread({}, appProps, {\n                    pageProps: appProps && appProps.pageProps ? appProps.pageProps : {}\n                  }, {\n                    renderError: null\n                  });\n                  apolloClient = initApollo(null, ctx);\n                  apolloState = {\n                    data: {}\n                  };\n                  _context.prev = 9;\n                  _context.next = 12;\n                  return getDataFromTree(__jsx(App, _extends({}, appProps, {\n                    Component: Component,\n                    router: router,\n                    apolloState: apolloState,\n                    apolloClient: apolloClient\n                  })));\n\n                case 12:\n                  _context.next = 17;\n                  break;\n\n                case 14:\n                  _context.prev = 14;\n                  _context.t0 = _context[\"catch\"](9);\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 17:\n                  if (!process.browser) {\n                    // getDataFromTree does not call componentWillUnmount\n                    // head side effect therefore need to be cleared manually\n                    Head.rewind();\n                  } // Extract query data from the Apollo store\n\n\n                  apolloState.data = apolloClient.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 20:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[9, 14]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithApollo(props) {\n      var _this;\n\n      _classCallCheck(this, WithApollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithApollo).call(this, props)); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      // https://github.com/zeit/next.js/issues/7418 - problem with sending cookies on SSR.\n\n      _this.apolloClient = props.apolloClient || initApollo(get(props, 'apolloState.data', undefined));\n      return _this;\n    }\n\n    _createClass(WithApollo, [{\n      key: \"render\",\n      value: function render() {\n        return __jsx(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient\n        }));\n      }\n    }]);\n\n    return WithApollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", 'withApolloClient(App)'), _temp;\n};\n\nexport { withApolloClient };","map":{"version":3,"sources":["/Users/karelcervicek/Documents/GitHub/reality-solution-demo/apollo/withApolloClient.tsx"],"names":["withApolloClient","React","Component","router","ctx","appCtx","appProps","App","pageProps","renderError","apolloClient","initApollo","apolloState","data","getDataFromTree","console","process","Head","props","get"],"mappings":"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","sourcesContent":["\nimport { ApolloClient, NormalizedCacheObject } from 'apollo-boost'\nimport { getDataFromTree } from 'react-apollo';\nimport { initApollo } from './initApollo';\nimport { AppContext, AppInitialProps, AppProps } from 'next/app';\nimport get from 'lodash/get';\nimport Head from 'next/head';\nimport React from 'react';\n\n\ninterface IApolloProps {\n  apolloState?: NormalizedCacheObject;\n  apolloClient: ApolloClient<NormalizedCacheObject>;\n}\nconst withApolloClient = (App: any) => {\n  return class WithApollo extends React.Component<IApolloProps & AppInitialProps & AppProps> {\n    public static displayName = 'withApolloClient(App)';\n    public apolloClient: ApolloClient<NormalizedCacheObject>;\n\n    public static async getInitialProps(appCtx: AppContext) {\n      const { Component, router, ctx } = appCtx;\n\n      let appProps: any = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(appCtx);\n      }\n\n      appProps = {\n        ...appProps,\n        ...{ pageProps: appProps && appProps.pageProps ? appProps.pageProps : {} },\n        renderError: null,\n      };\n      \n      const apolloClient = initApollo(null, ctx);\n      const apolloState = { data: {} };\n\n      try {\n        // Run all GraphQL queries in the component tree\n        // and extract the resulting data\n        // Run all GraphQL queries\n        await getDataFromTree(\n          <App\n            {...appProps}\n            Component={Component}\n            router={router}\n            apolloState={apolloState}\n            apolloClient={apolloClient}\n          />,\n        );\n      } catch (error) {\n        console.error('Error while running `getDataFromTree`', error);\n      }\n\n      if (!process.browser) {\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      apolloState.data = apolloClient.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n      };\n    }\n\n    constructor(props: IApolloProps & AppInitialProps & AppProps) {\n      super(props);\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      // https://github.com/zeit/next.js/issues/7418 - problem with sending cookies on SSR.\n      this.apolloClient = props.apolloClient || initApollo(get(props, 'apolloState.data', undefined));\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n\nexport {\n  withApolloClient,\n}\n"]},"metadata":{},"sourceType":"module"}