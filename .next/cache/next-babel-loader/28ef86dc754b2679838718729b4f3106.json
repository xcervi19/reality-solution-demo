{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { BatchHttpLink } from 'apollo-link-batch-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport get from 'lodash/get';\nimport isomorphicFetch from 'isomorphic-unfetch';\n// Polyfill fetch() on the server (used by apollo-client)\n// if (!process.browser) {\n//   global.fetch = isomorphicFetch;\n// }\nvar ApolloLinkUri = \"http://localhost:4000/graphql\";\nvar apolloClient = null;\n\nfunction create(initialState, context) {\n  var req = get(context, 'req', undefined);\n  var headers = req && req.headers ? req.headers : {};\n  var httpLink = new BatchHttpLink({\n    uri: ApolloLinkUri,\n    credentials: 'same-origin',\n    headers: headers,\n    batchMax: 20,\n    fetch: isomorphicFetch\n  });\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: httpLink,\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nfunction initApollo(initialState, ctx) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, ctx);\n  }\n\n  return apolloClient;\n}\n\n;\nexport { initApollo };","map":{"version":3,"sources":["/Users/karelcervicek/Documents/GitHub/reality-solution-demo/apollo/initApollo.tsx"],"names":["ApolloClient","BatchHttpLink","InMemoryCache","get","isomorphicFetch","ApolloLinkUri","apolloClient","create","initialState","context","req","undefined","headers","httpLink","uri","credentials","batchMax","fetch","connectToDevTools","process","browser","ssrMode","link","cache","restore","initApollo","ctx"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,aAAT,QAAqD,uBAArD;AAEA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAIA;AACA;AACA;AACA;AAEA,IAAMC,aAAqB,GAAG,+BAA9B;AAEA,IAAIC,YAAwD,GAAG,IAA/D;;AAEA,SAASC,MAAT,CAAgBC,YAAhB,EAAmDC,OAAnD,EAA8E;AAC5E,MAAMC,GAAG,GAAGP,GAAG,CAACM,OAAD,EAAU,KAAV,EAAiBE,SAAjB,CAAf;AACA,MAAIC,OAAO,GAAGF,GAAG,IAAIA,GAAG,CAACE,OAAX,GAAqBF,GAAG,CAACE,OAAzB,GAAmC,EAAjD;AAEA,MAAMC,QAAQ,GAAG,IAAIZ,aAAJ,CAAkB;AACjCa,IAAAA,GAAG,EAAET,aAD4B;AAEjCU,IAAAA,WAAW,EAAE,aAFoB;AAGjCH,IAAAA,OAAO,EAAPA,OAHiC;AAIjCI,IAAAA,QAAQ,EAAE,EAJuB;AAKjCC,IAAAA,KAAK,EAAEb;AAL0B,GAAlB,CAAjB;AAQA,SAAO,IAAIJ,YAAJ,CAAiB;AACtBkB,IAAAA,iBAAiB,EAAEC,OAAO,CAACC,OADL;AAEtBC,IAAAA,OAAO,EAAE,CAACF,OAAO,CAACC,OAFI;AAEK;AAC3BE,IAAAA,IAAI,EAAET,QAHgB;AAItBU,IAAAA,KAAK,EAAE,IAAIrB,aAAJ,GAAoBsB,OAApB,CAA4BhB,YAAY,IAAI,EAA5C;AAJe,GAAjB,CAAP;AAMD;;AAGD,SAASiB,UAAT,CAAoBjB,YAApB,EAAuDkB,GAAvD,EAAmH;AACjH;AACA;AACA,MAAI,CAACP,OAAO,CAACC,OAAb,EAAsB;AACpB,WAAOb,MAAM,CAACC,YAAD,EAAekB,GAAf,CAAb;AACD,GALgH,CAOjH;;;AACA,MAAI,CAACpB,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGC,MAAM,CAACC,YAAD,EAAekB,GAAf,CAArB;AACD;;AAED,SAAOpB,YAAP;AACD;;AAAA;AAED,SACEmB,UADF","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { BatchHttpLink } from 'apollo-link-batch-http';\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { NextPageContext } from 'next';\nimport get from 'lodash/get';\nimport isomorphicFetch from 'isomorphic-unfetch';\n\ntype TApolloInitialState = null | NormalizedCacheObject;\n\n// Polyfill fetch() on the server (used by apollo-client)\n// if (!process.browser) {\n//   global.fetch = isomorphicFetch;\n// }\n\nconst ApolloLinkUri: string = \"http://localhost:4000/graphql\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\nfunction create(initialState: TApolloInitialState, context?: NextPageContext) {\n  const req = get(context, 'req', undefined);\n  let headers = req && req.headers ? req.headers : {};\n\n  const httpLink = new BatchHttpLink({\n    uri: ApolloLinkUri,\n    credentials: 'same-origin',\n    headers,\n    batchMax: 20,\n    fetch: isomorphicFetch\n  });\n\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: httpLink,\n    cache: new InMemoryCache().restore(initialState || {}),\n  });\n}\n\n\nfunction initApollo(initialState: TApolloInitialState, ctx?: NextPageContext): ApolloClient<NormalizedCacheObject> {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState, ctx);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState, ctx);\n  }\n\n  return apolloClient;\n};\n\nexport {\n  initApollo\n};\n"]},"metadata":{},"sourceType":"module"}