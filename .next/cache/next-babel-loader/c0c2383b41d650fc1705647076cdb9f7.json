{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport { getDataFromTree } from 'react-apollo';\nimport { initApollo } from './initApollo';\nimport get from 'lodash/get';\nimport Head from 'next/head';\nimport React from 'react';\n\nvar withApolloClient = function withApolloClient(App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithApollo, _React$Component);\n\n    _createClass(WithApollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(appCtx) {\n          var Component, router, ctx, appProps, apolloClient, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = appCtx.Component, router = appCtx.router, ctx = appCtx.ctx;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return App.getInitialProps(appCtx);\n\n                case 5:\n                  appProps = _context.sent;\n\n                case 6:\n                  appProps = _objectSpread({}, appProps, {\n                    pageProps: appProps && appProps.pageProps ? appProps.pageProps : {}\n                  }, {\n                    renderError: null\n                  });\n                  apolloClient = initApollo(null, ctx);\n                  apolloState = {\n                    data: {}\n                  };\n                  _context.prev = 9;\n                  _context.next = 12;\n                  return getDataFromTree(__jsx(App, _extends({}, appProps, {\n                    Component: Component,\n                    router: router,\n                    apolloState: apolloState,\n                    apolloClient: apolloClient\n                  })));\n\n                case 12:\n                  _context.next = 17;\n                  break;\n\n                case 14:\n                  _context.prev = 14;\n                  _context.t0 = _context[\"catch\"](9);\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 17:\n                  if (!process.browser) {\n                    // getDataFromTree does not call componentWillUnmount\n                    // head side effect therefore need to be cleared manually\n                    Head.rewind();\n                  } // Extract query data from the Apollo store\n\n\n                  apolloState.data = apolloClient.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 20:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[9, 14]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithApollo(props) {\n      var _this;\n\n      _classCallCheck(this, WithApollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithApollo).call(this, props)); // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      // https://github.com/zeit/next.js/issues/7418 - problem with sending cookies on SSR.\n\n      _this.apolloClient = props.apolloClient || initApollo(get(props, 'apolloState.data', undefined));\n      return _this;\n    }\n\n    _createClass(WithApollo, [{\n      key: \"render\",\n      value: function render() {\n        return __jsx(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient\n        }));\n      }\n    }]);\n\n    return WithApollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", 'withApolloClient(App)'), _temp;\n};\n\nexport { withApolloClient };","map":{"version":3,"sources":["/Users/karelcervicek/Documents/GitHub/reality-solution-demo/apollo/withApolloClient.tsx"],"names":["getDataFromTree","initApollo","get","Head","React","withApolloClient","App","appCtx","Component","router","ctx","appProps","getInitialProps","pageProps","renderError","apolloClient","apolloState","data","console","error","process","browser","rewind","cache","extract","props","undefined"],"mappings":";;;;;;;;;;;AAEA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAOA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAc;AAAA;;AACrC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAIsCC,MAJtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAKYC,kBAAAA,SALZ,GAKuCD,MALvC,CAKYC,SALZ,EAKuBC,MALvB,GAKuCF,MALvC,CAKuBE,MALvB,EAK+BC,GAL/B,GAKuCH,MALvC,CAK+BG,GAL/B;AAOQC,kBAAAA,QAPR,GAOwB,EAPxB;;AAAA,uBAQQL,GAAG,CAACM,eARZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBASuBN,GAAG,CAACM,eAAJ,CAAoBL,MAApB,CATvB;;AAAA;AASMI,kBAAAA,QATN;;AAAA;AAYIA,kBAAAA,QAAQ,qBACHA,QADG,EAEH;AAAEE,oBAAAA,SAAS,EAAEF,QAAQ,IAAIA,QAAQ,CAACE,SAArB,GAAiCF,QAAQ,CAACE,SAA1C,GAAsD;AAAnE,mBAFG;AAGNC,oBAAAA,WAAW,EAAE;AAHP,oBAAR;AAMMC,kBAAAA,YAlBV,GAkByBd,UAAU,CAAC,IAAD,EAAOS,GAAP,CAlBnC;AAmBUM,kBAAAA,WAnBV,GAmBwB;AAAEC,oBAAAA,IAAI,EAAE;AAAR,mBAnBxB;AAAA;AAAA;AAAA,yBAyBYjB,eAAe,CACnB,MAAC,GAAD,eACMW,QADN;AAEE,oBAAA,SAAS,EAAEH,SAFb;AAGE,oBAAA,MAAM,EAAEC,MAHV;AAIE,oBAAA,WAAW,EAAEO,WAJf;AAKE,oBAAA,YAAY,EAAED;AALhB,qBADmB,CAzB3B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmCMG,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AAnCN;AAsCI,sBAAI,CAACC,OAAO,CAACC,OAAb,EAAsB;AACpB;AACA;AACAlB,oBAAAA,IAAI,CAACmB,MAAL;AACD,mBA1CL,CA4CI;;;AACAN,kBAAAA,WAAW,CAACC,IAAZ,GAAmBF,YAAY,CAACQ,KAAb,CAAmBC,OAAnB,EAAnB;AA7CJ,qEAgDSb,QAhDT;AAiDMK,oBAAAA,WAAW,EAAXA;AAjDN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAqDE,wBAAYS,KAAZ,EAA8D;AAAA;;AAAA;;AAC5D,sFAAMA,KAAN,GAD4D,CAE5D;AACA;AACA;;AACA,YAAKV,YAAL,GAAoBU,KAAK,CAACV,YAAN,IAAsBd,UAAU,CAACC,GAAG,CAACuB,KAAD,EAAQ,kBAAR,EAA4BC,SAA5B,CAAJ,CAApD;AAL4D;AAM7D;;AA3DH;AAAA;AAAA,+BA6DW;AACP,eAAO,MAAC,GAAD,eAAS,KAAKD,KAAd;AAAqB,UAAA,YAAY,EAAE,KAAKV;AAAxC,WAAP;AACD;AA/DH;;AAAA;AAAA,IAAgCX,KAAK,CAACI,SAAtC,0CAC8B,uBAD9B;AAiED,CAlED;;AAoEA,SACEH,gBADF","sourcesContent":["\nimport { ApolloClient, NormalizedCacheObject } from 'apollo-boost'\nimport { getDataFromTree } from 'react-apollo';\nimport { initApollo } from './initApollo';\nimport { AppContext, AppInitialProps, AppProps } from 'next/app';\nimport get from 'lodash/get';\nimport Head from 'next/head';\nimport React from 'react';\n\n\ninterface IApolloProps {\n  apolloState?: NormalizedCacheObject;\n  apolloClient: ApolloClient<NormalizedCacheObject>;\n}\nconst withApolloClient = (App: any) => {\n  return class WithApollo extends React.Component<IApolloProps & AppInitialProps & AppProps> {\n    public static displayName = 'withApolloClient(App)';\n    public apolloClient: ApolloClient<NormalizedCacheObject>;\n\n    public static async getInitialProps(appCtx: AppContext) {\n      const { Component, router, ctx } = appCtx;\n\n      let appProps: any = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(appCtx);\n      }\n\n      appProps = {\n        ...appProps,\n        ...{ pageProps: appProps && appProps.pageProps ? appProps.pageProps : {} },\n        renderError: null,\n      };\n      \n      const apolloClient = initApollo(null, ctx);\n      const apolloState = { data: {} };\n\n      try {\n        // Run all GraphQL queries in the component tree\n        // and extract the resulting data\n        // Run all GraphQL queries\n        await getDataFromTree(\n          <App\n            {...appProps}\n            Component={Component}\n            router={router}\n            apolloState={apolloState}\n            apolloClient={apolloClient}\n          />,\n        );\n      } catch (error) {\n        console.error('Error while running `getDataFromTree`', error);\n      }\n\n      if (!process.browser) {\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      apolloState.data = apolloClient.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n      };\n    }\n\n    constructor(props: IApolloProps & AppInitialProps & AppProps) {\n      super(props);\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\n      // After that rendering is done using Next's normal rendering pipeline\n      // https://github.com/zeit/next.js/issues/7418 - problem with sending cookies on SSR.\n      this.apolloClient = props.apolloClient || initApollo(get(props, 'apolloState.data', undefined));\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n\nexport {\n  withApolloClient,\n}\n"]},"metadata":{},"sourceType":"module"}