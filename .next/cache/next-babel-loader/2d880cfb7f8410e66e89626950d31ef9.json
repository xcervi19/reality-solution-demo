{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { BatchHttpLink } from 'apollo-link-batch-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport get from 'lodash/get';\nimport isomorphicFetch from 'isomorphic-unfetch'; // Polyfill fetch() on the server (used by apollo-client)\n// if (!process.browser) {\n//   global.fetch = isomorphicFetch;\n// }\n\nvar ApolloLinkUri = \"http://localhost:4000/graphql\";\nvar apolloClient = null;\n\nfunction create(initialState, context) {\n  var req = get(context, 'req', undefined);\n  var headers = req && req.headers ? req.headers : {};\n  var httpLink = new BatchHttpLink({\n    uri: ApolloLinkUri,\n    credentials: 'same-origin',\n    headers: headers,\n    batchMax: 20,\n    fetch: isomorphicFetch\n  });\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: httpLink,\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nfunction initApollo(initialState, ctx) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, ctx);\n  }\n\n  return apolloClient;\n}\n\n;\nexport { initApollo };","map":{"version":3,"sources":["/Users/karelcervicek/Documents/GitHub/reality-solution-demo/apollo/initApollo.tsx"],"names":["ApolloLinkUri","apolloClient","req","get","headers","httpLink","uri","credentials","batchMax","fetch","isomorphicFetch","connectToDevTools","process","ssrMode","link","cache","initialState","create"],"mappings":"AAAA,SAAA,YAAA,QAAA,eAAA;AACA,SAAA,aAAA,QAAA,wBAAA;AACA,SAAA,aAAA,QAAA,uBAAA;AAEA,OAAA,GAAA,MAAA,YAAA;AACA,OAAA,eAAA,MAAA,oBAAA,C,CAIA;AACA;AACA;AACA;;AAEA,IAAMA,aAAqB,GAA3B,+BAAA;AAEA,IAAIC,YAAwD,GAA5D,IAAA;;AAEA,SAAA,MAAA,CAAA,YAAA,EAAA,OAAA,EAA8E;AAC5E,MAAMC,GAAG,GAAGC,GAAG,CAAA,OAAA,EAAA,KAAA,EAAf,SAAe,CAAf;AACA,MAAIC,OAAO,GAAGF,GAAG,IAAIA,GAAG,CAAVA,OAAAA,GAAqBA,GAAG,CAAxBA,OAAAA,GAAd,EAAA;AAEA,MAAMG,QAAQ,GAAG,IAAA,aAAA,CAAkB;AACjCC,IAAAA,GAAG,EAD8B,aAAA;AAEjCC,IAAAA,WAAW,EAFsB,aAAA;AAGjCH,IAAAA,OAAO,EAH0B,OAAA;AAIjCI,IAAAA,QAAQ,EAJyB,EAAA;AAKjCC,IAAAA,KAAK,EAAEC;AAL0B,GAAlB,CAAjB;AAQA,SAAO,IAAA,YAAA,CAAiB;AACtBC,IAAAA,iBAAiB,EAAEC,OAAO,CADJ,OAAA;AAEtBC,IAAAA,OAAO,EAAE,CAACD,OAAO,CAFK,OAAA;AAEK;AAC3BE,IAAAA,IAAI,EAHkB,QAAA;AAItBC,IAAAA,KAAK,EAAE,IAAA,aAAA,GAAA,OAAA,CAA4BC,YAAY,IAAxC,EAAA;AAJe,GAAjB,CAAP;AAMD;;AAGD,SAAA,UAAA,CAAA,YAAA,EAAA,GAAA,EAAmH;AACjH;AACA;AACA,MAAI,CAACJ,OAAO,CAAZ,OAAA,EAAsB;AACpB,WAAOK,MAAM,CAAA,YAAA,EAAb,GAAa,CAAb;AAJ+G,GAAA,CAOjH;;;AACA,MAAI,CAAJ,YAAA,EAAmB;AACjBhB,IAAAA,YAAY,GAAGgB,MAAM,CAAA,YAAA,EAArBhB,GAAqB,CAArBA;AACD;;AAED,SAAA,YAAA;AACD;;AAAA;AAED,SAAA,UAAA","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { BatchHttpLink } from 'apollo-link-batch-http';\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { NextPageContext } from 'next';\nimport get from 'lodash/get';\nimport isomorphicFetch from 'isomorphic-unfetch';\n\ntype TApolloInitialState = null | NormalizedCacheObject;\n\n// Polyfill fetch() on the server (used by apollo-client)\n// if (!process.browser) {\n//   global.fetch = isomorphicFetch;\n// }\n\nconst ApolloLinkUri: string = \"http://localhost:4000/graphql\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\nfunction create(initialState: TApolloInitialState, context?: NextPageContext) {\n  const req = get(context, 'req', undefined);\n  let headers = req && req.headers ? req.headers : {};\n\n  const httpLink = new BatchHttpLink({\n    uri: ApolloLinkUri,\n    credentials: 'same-origin',\n    headers,\n    batchMax: 20,\n    fetch: isomorphicFetch\n  });\n\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: httpLink,\n    cache: new InMemoryCache().restore(initialState || {}),\n  });\n}\n\n\nfunction initApollo(initialState: TApolloInitialState, ctx?: NextPageContext): ApolloClient<NormalizedCacheObject> {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState, ctx);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState, ctx);\n  }\n\n  return apolloClient;\n};\n\nexport {\n  initApollo\n};\n"]},"metadata":{},"sourceType":"module"}