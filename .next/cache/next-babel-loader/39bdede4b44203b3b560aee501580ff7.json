{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport Layout from '../components/Layout';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { factMutation } from '../graphql/facts/factMutation';\nimport { factQuery } from '../graphql/facts/factQuery';\n\nconst IndexPage = () => {\n  const {\n    0: formState,\n    1: setFormState\n  } = useState({\n    text: ''\n  });\n  const {\n    data: FData,\n    loading: FLoading,\n    error: FError\n  } = useQuery(factQuery, {\n    ssr: false\n  });\n  const [sendFact, {\n    loading: MFloading,\n    data: MFData,\n    error: MFError\n  }] = useMutation(factMutation);\n  return __jsx(Layout, {\n    title: \"Home | Next.js + TypeScript Example\"\n  }, __jsx(\"h2\", null, \"Random facts\"), FLoading && __jsx(\"p\", null, \"loading...\"), FError && __jsx(\"p\", null, \"error...\"), !FLoading && !FError && FData && __jsx(\"p\", null, FData.fact.text), __jsx(\"hr\", null), __jsx(\"form\", {\n    onSubmit: e => e.preventDefault()\n  }, __jsx(\"input\", {\n    name: \"text\",\n    id: \"text\",\n    type: \"text\",\n    onChange: e => setFormState({\n      text: e.target.value\n    })\n  }), __jsx(\"button\", {\n    type: \"button\",\n    onClick: () => {\n      sendFact({\n        variables: {\n          fact: formState\n        }\n      });\n    }\n  }, \"Odeslat\"), __jsx(\"br\", null), \"error: \", _JSON$stringify(MFError), \" \", __jsx(\"br\", null), \"loading: \", MFloading, \" \", __jsx(\"br\", null), \"data: \", _JSON$stringify(MFData), \" \", __jsx(\"br\", null)), __jsx(\"h1\", null, \"Hello \\uD83D\\uDC4B\"), __jsx(\"p\", null, __jsx(Link, {\n    href: \"/about\"\n  }, __jsx(\"a\", null, \"About neco\"))));\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/karelcervicek/Documents/GitHub/reality-solution-demo/pages/index.tsx"],"names":["React","useState","Link","Layout","useQuery","useMutation","factMutation","factQuery","IndexPage","formState","setFormState","text","data","FData","loading","FLoading","error","FError","ssr","sendFact","MFloading","MFData","MFError","fact","e","preventDefault","target","value","variables"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AAEA,SAASC,YAAT,QAA6B,+BAA7B;AACA,SAASC,SAAT,QAAqC,4BAArC;;AAEA,MAAMC,SAAmB,GAAG,MAAM;AAEhC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAE;AAAR,GAAD,CAA1C;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEC,KAAR;AAAeC,IAAAA,OAAO,EAAEC,QAAxB;AAAkCC,IAAAA,KAAK,EAAEC;AAAzC,MAAoDb,QAAQ,CAAYG,SAAZ,EAAuB;AAAEW,IAAAA,GAAG,EAAE;AAAP,GAAvB,CAAlE;AACA,QAAM,CAACC,QAAD,EAAW;AAAEL,IAAAA,OAAO,EAAEM,SAAX;AAAsBR,IAAAA,IAAI,EAAES,MAA5B;AAAoCL,IAAAA,KAAK,EAAEM;AAA3C,GAAX,IAAmEjB,WAAW,CAACC,YAAD,CAApF;AAEA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC;AAAd,KAEE,iCAFF,EAGGS,QAAQ,IAAI,8BAHf,EAIGE,MAAM,IAAI,4BAJb,EAKG,CAACF,QAAD,IAAa,CAACE,MAAd,IAAwBJ,KAAxB,IAAiC,iBAAIA,KAAK,CAACU,IAAN,CAAWZ,IAAf,CALpC,EAME,iBANF,EAOE;AAAM,IAAA,QAAQ,EAAGa,CAAD,IAAOA,CAAC,CAACC,cAAF;AAAvB,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,MAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,QAAQ,EAAGD,CAAD,IAAOd,YAAY,CAAC;AAAEC,MAAAA,IAAI,EAAEa,CAAC,CAACE,MAAF,CAASC;AAAjB,KAAD;AAJ/B,IADF,EAOE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAE,MAAM;AACbR,MAAAA,QAAQ,CAAC;AAAES,QAAAA,SAAS,EAAE;AAAEL,UAAAA,IAAI,EAAEd;AAAR;AAAb,OAAD,CAAR;AACD;AAJH,eAPF,EAcW,iBAdX,aAeU,gBAAea,OAAf,CAfV,OAemC,iBAfnC,eAgBYF,SAhBZ,OAgBuB,iBAhBvB,YAiBS,gBAAeC,MAAf,CAjBT,OAiBiC,iBAjBjC,CAPF,EA4BE,uCA5BF,EA6BE,iBACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACE,8BADF,CADF,CA7BF,CADF;AAqCD,CA3CD;;AA6CA,eAAeb,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport Link from 'next/link'\nimport Layout from '../components/Layout'\nimport { NextPage } from 'next'\nimport { useQuery, useMutation } from '@apollo/react-hooks';\n\nimport { factMutation } from '../graphql/facts/factMutation';\nimport { factQuery, TFactData } from '../graphql/facts/factQuery';\n\nconst IndexPage: NextPage = () => {\n\n  const [formState, setFormState] = useState({ text: '' });\n  const { data: FData, loading: FLoading, error: FError } = useQuery<TFactData>(factQuery, { ssr: false })\n  const [sendFact, { loading: MFloading, data: MFData, error: MFError }] = useMutation(factMutation);\n\n  return (\n    <Layout title=\"Home | Next.js + TypeScript Example\">\n\n      <h2>Random facts</h2>\n      {FLoading && <p>loading...</p>}\n      {FError && <p>error...</p>}\n      {!FLoading && !FError && FData && <p>{FData.fact.text}</p>}\n      <hr />\n      <form onSubmit={(e) => e.preventDefault()}>\n        <input\n          name=\"text\"\n          id=\"text\"\n          type=\"text\"\n          onChange={(e) => setFormState({ text: e.target.value })}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            sendFact({ variables: { fact: formState } });\n          }}\n        >\n          Odeslat\n        </button><br />\n        error: {JSON.stringify(MFError)} <br />\n        loading: {MFloading} <br />\n        data: {JSON.stringify(MFData)} <br />\n      </form>\n\n\n      <h1>Hello ðŸ‘‹</h1>\n      <p>\n        <Link href=\"/about\">\n          <a>About neco</a>\n        </Link>\n      </p>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}